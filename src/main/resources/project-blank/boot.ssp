<%@ var mainpack:String %><%@ var cappuccinoapp:String %>package bootstrap.liftweb
import _root_.net.liftweb.util._
import _root_.net.liftweb.common._
import _root_.net.liftweb.http._
import _root_.net.liftweb.http.provider._
import _root_.net.liftweb.sitemap._
import _root_.net.liftweb.sitemap.Loc._
import Helpers._
import net.liftweb._
import http.{LiftRules, NotFoundAsTemplate, ParsePath}
import sitemap.{SiteMap, Menu, Loc}
import util.{ NamedPF }

//#inject point: imports


class Boot {
  def boot {
  
    //#inject point: top
  
    // where to search snippet
    LiftRules.addToPackages("${mainpack}")

    // build sitemap
    val entries = List(Menu("Home") / "index") :::
									List(Menu("${cappuccinoapp}") / "capp") :::
									List(Menu("${cappuccinoapp}-debug") / "capp_debug") :::
                  //#inject point: sitemap
                  Nil
    
    LiftRules.uriNotFound.prepend(NamedPF("404handler"){
      case (req,failure) => NotFoundAsTemplate(
        ParsePath(List("exceptions","404"),"html",false,false))
    })
    
    LiftRules.setSiteMap(SiteMap(entries:_*))
    
    // set character encoding
    LiftRules.early.append(_.setCharacterEncoding("UTF-8"))
    
    //#inject point: bottom
    

    /*
     * Show the spinny image when an Ajax call starts
     */
    LiftRules.ajaxStart =
    Full(() => LiftRules.jsArtifacts.show("ajax-loader").cmd)

    /*
     * Make the spinny image go away when it ends
     */
    LiftRules.ajaxEnd =
    Full(() => LiftRules.jsArtifacts.hide("ajax-loader").cmd)

    LiftRules.early.append(makeUtf8)

    LiftRules.useXhtmlMimeType = false

    // We serve Cappuccino files with wicked friendly
    // mime types
    LiftRules.liftRequest.append {
      case Req( _, "j", GetRequest) => true
      case Req( _, "sj", GetRequest) => true
      case Req( _, "plist", GetRequest) => true
    }

    LiftRules.statelessDispatchTable.prepend {
      case r @ Req( _, "j", GetRequest) => ObjJServer.serve(r)
      case r @ Req( _, "sj", GetRequest) => ObjJServer.serve(r)
      case r @ Req( _, "plist", GetRequest) => ObjJServer.serve(r)
    }
	}

  /**
   * Force the request to be UTF-8
   */
  private def makeUtf8(req: HTTPRequest) {
    req.setCharacterEncoding("UTF-8")
  }
	
}

object ObjJServer {
  def serve(req: Req)(): Box[LiftResponse] =
  for {
    url <- LiftRules.getResource(req.path.wholePath.mkString("/", "/", ""))
    urlConn <- tryo(url.openConnection)
    lastModified = ResourceServer.calcLastModified(url)
  } yield {
    req.testFor304(lastModified, "Expires" -> toInternetDate(millis + 30.days)) openOr {
      val stream = url.openStream
      StreamingResponse(stream, () => stream.close, urlConn.getContentLength,
                        (if (lastModified == 0L) Nil else
                         List(("Last-Modified", toInternetDate(lastModified)))) :::
                        List(("Expires", toInternetDate(millis + 30.days)),
                             ("Content-Type","application/text")), Nil,
                        200)
    }
  }

}